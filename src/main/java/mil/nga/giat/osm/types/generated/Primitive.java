/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.osm.types.generated;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Primitive extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Primitive\",\"namespace\":\"mil.nga.giat.osm.types.generated\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":[\"null\",\"long\"]},{\"name\":\"user_name\",\"type\":[\"null\",\"string\"]},{\"name\":\"changeset_id\",\"type\":\"long\"},{\"name\":\"visible\",\"type\":\"boolean\",\"default\":\"true\"},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public long version;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.Long user_id;
  @Deprecated public java.lang.CharSequence user_name;
  @Deprecated public long changeset_id;
  @Deprecated public boolean visible;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Primitive() {}

  /**
   * All-args constructor.
   */
  public Primitive(java.lang.Long id, java.lang.Long version, java.lang.Long timestamp, java.lang.Long user_id, java.lang.CharSequence user_name, java.lang.Long changeset_id, java.lang.Boolean visible, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags) {
    this.id = id;
    this.version = version;
    this.timestamp = timestamp;
    this.user_id = user_id;
    this.user_name = user_name;
    this.changeset_id = changeset_id;
    this.visible = visible;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return version;
    case 2: return timestamp;
    case 3: return user_id;
    case 4: return user_name;
    case 5: return changeset_id;
    case 6: return visible;
    case 7: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: version = (java.lang.Long)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: user_id = (java.lang.Long)value$; break;
    case 4: user_name = (java.lang.CharSequence)value$; break;
    case 5: changeset_id = (java.lang.Long)value$; break;
    case 6: visible = (java.lang.Boolean)value$; break;
    case 7: tags = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'version' field.
   */
  public java.lang.Long getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Long value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   */
  public java.lang.Long getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'user_name' field.
   */
  public java.lang.CharSequence getUserName() {
    return user_name;
  }

  /**
   * Sets the value of the 'user_name' field.
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.user_name = value;
  }

  /**
   * Gets the value of the 'changeset_id' field.
   */
  public java.lang.Long getChangesetId() {
    return changeset_id;
  }

  /**
   * Sets the value of the 'changeset_id' field.
   * @param value the value to set.
   */
  public void setChangesetId(java.lang.Long value) {
    this.changeset_id = value;
  }

  /**
   * Gets the value of the 'visible' field.
   */
  public java.lang.Boolean getVisible() {
    return visible;
  }

  /**
   * Sets the value of the 'visible' field.
   * @param value the value to set.
   */
  public void setVisible(java.lang.Boolean value) {
    this.visible = value;
  }

  /**
   * Gets the value of the 'tags' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.tags = value;
  }

  /** Creates a new Primitive RecordBuilder */
  public static mil.nga.giat.osm.types.generated.Primitive.Builder newBuilder() {
    return new mil.nga.giat.osm.types.generated.Primitive.Builder();
  }
  
  /** Creates a new Primitive RecordBuilder by copying an existing Builder */
  public static mil.nga.giat.osm.types.generated.Primitive.Builder newBuilder(mil.nga.giat.osm.types.generated.Primitive.Builder other) {
    return new mil.nga.giat.osm.types.generated.Primitive.Builder(other);
  }
  
  /** Creates a new Primitive RecordBuilder by copying an existing Primitive instance */
  public static mil.nga.giat.osm.types.generated.Primitive.Builder newBuilder(mil.nga.giat.osm.types.generated.Primitive other) {
    return new mil.nga.giat.osm.types.generated.Primitive.Builder(other);
  }
  
  /**
   * RecordBuilder for Primitive instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Primitive>
    implements org.apache.avro.data.RecordBuilder<Primitive> {

    private long id;
    private long version;
    private long timestamp;
    private java.lang.Long user_id;
    private java.lang.CharSequence user_name;
    private long changeset_id;
    private boolean visible;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;

    /** Creates a new Builder */
    private Builder() {
      super(mil.nga.giat.osm.types.generated.Primitive.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(mil.nga.giat.osm.types.generated.Primitive.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.user_name)) {
        this.user_name = data().deepCopy(fields()[4].schema(), other.user_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeset_id)) {
        this.changeset_id = data().deepCopy(fields()[5].schema(), other.changeset_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.visible)) {
        this.visible = data().deepCopy(fields()[6].schema(), other.visible);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tags)) {
        this.tags = data().deepCopy(fields()[7].schema(), other.tags);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Primitive instance */
    private Builder(mil.nga.giat.osm.types.generated.Primitive other) {
            super(mil.nga.giat.osm.types.generated.Primitive.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.user_name)) {
        this.user_name = data().deepCopy(fields()[4].schema(), other.user_name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.changeset_id)) {
        this.changeset_id = data().deepCopy(fields()[5].schema(), other.changeset_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.visible)) {
        this.visible = data().deepCopy(fields()[6].schema(), other.visible);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tags)) {
        this.tags = data().deepCopy(fields()[7].schema(), other.tags);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public java.lang.Long getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setVersion(long value) {
      validate(fields()[1], value);
      this.version = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'version' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearVersion() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'timestamp' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'user_id' field */
    public java.lang.Long getUserId() {
      return user_id;
    }
    
    /** Sets the value of the 'user_id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setUserId(java.lang.Long value) {
      validate(fields()[3], value);
      this.user_id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'user_id' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'user_id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'user_name' field */
    public java.lang.CharSequence getUserName() {
      return user_name;
    }
    
    /** Sets the value of the 'user_name' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.user_name = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'user_name' field has been set */
    public boolean hasUserName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'user_name' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'changeset_id' field */
    public java.lang.Long getChangesetId() {
      return changeset_id;
    }
    
    /** Sets the value of the 'changeset_id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setChangesetId(long value) {
      validate(fields()[5], value);
      this.changeset_id = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'changeset_id' field has been set */
    public boolean hasChangesetId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'changeset_id' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearChangesetId() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'visible' field */
    public java.lang.Boolean getVisible() {
      return visible;
    }
    
    /** Sets the value of the 'visible' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setVisible(boolean value) {
      validate(fields()[6], value);
      this.visible = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'visible' field has been set */
    public boolean hasVisible() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'visible' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearVisible() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.tags = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'tags' field */
    public mil.nga.giat.osm.types.generated.Primitive.Builder clearTags() {
      tags = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Primitive build() {
      try {
        Primitive record = new Primitive();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.version = fieldSetFlags()[1] ? this.version : (java.lang.Long) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.user_id = fieldSetFlags()[3] ? this.user_id : (java.lang.Long) defaultValue(fields()[3]);
        record.user_name = fieldSetFlags()[4] ? this.user_name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.changeset_id = fieldSetFlags()[5] ? this.changeset_id : (java.lang.Long) defaultValue(fields()[5]);
        record.visible = fieldSetFlags()[6] ? this.visible : (java.lang.Boolean) defaultValue(fields()[6]);
        record.tags = fieldSetFlags()[7] ? this.tags : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
